---
title: "sandbox"
format: html
editor: source
---

```{r}
library(tidyverse)
library(tmap)
library(terra)
library(sf)
library(stars)
library(janitor)
library(spdep)
library(spatialreg)
library(readxl)
```

```{r}
# read in ca shapefile
townships <- st_read(here::here('data', 'Statewide_CA_PLSS_NAD83AlbersCA_20240718', 'Statewide_CA_PLSS_NAD83AlbersCA_20240718.shp')) %>% clean_names()

# read in county code csv
county_codes <- read_csv(here::here('data', 'pur2017', 'county.txt')) %>% clean_names(replace = c('couty_name' = 'county_name')) %>% lapply(tolower) %>% as_data_frame()
county_codes$county_name <- county_codes$county_name %>% make_clean_names()

# read and transform population density data
pop <- read_excel(here::here('data', 'co-est2023-pop-06.xlsx'), range = 'A5:F63')
names(pop) <- c('county_name', 'april_1_estimates', '2020', '2021', '2022', '2023')
pop$county_name <- pop$county_name %>% stringr::str_remove(., ' County, California') %>% stringr::str_remove(., '.') %>% make_clean_names()
pop <- pop %>% inner_join(county_codes, by = join_by(county_name))

# read in pesticide data
# will probably use PRODNO (product/mix id), CHEM_CODE (active ingredient id), LBS_PRD_USED (pounds pesticide mix used)
for (i in list.files(here::here('data', 'pur2017'), pattern = 'udc17_')){
  if (exists('pesticides') == FALSE) { # init empty df
  pesticides <- data.frame()
  }
  
  loading <- paste0('reading ', i, '......')
  print(loading)
  csv <- read_csv(here::here('data', 'pur2017', i), show_col_types = FALSE) # read in csv
  pesticides <- rbind(pesticides, csv) # append to mother df
}

# read in bee occurance data
bees <- read_csv(here::here('data', 'SymbOutput_2024-12-05_131650_DwC-A', 'occurrences.csv')) %>%
  drop_na('decimalLatitude', 'decimalLongitude') %>% 
  st_as_sf(coords = c('decimalLongitude', 'decimalLatitude')) %>% 
  st_set_crs('epsg:4326') %>% 
  st_transform(st_crs(townships))

# read habitat frag shapefile
hab_frag <- st_read(here::here('data','data0', 'wwf_ecos_hab_frag.shp')) %>% 
  st_make_valid() %>% 
  st_transform(st_crs(townships))

land_cover <- terra::rast(here::here('data', 'Annual_NLCD_LndCov_2023_CU_C1V0.tif'))

land_cover_stars <- read_stars(here::here('data', 'Annual_NLCD_LndCov_2023_CU_C1V0.tif'))

rm(csv, loading)

```


```{r}
# average population from 2020 to 2023
pop_mean <- pop %>% 
  mutate(mean = rowMeans(across(3:6))) %>% 
  select(county_name, county_cd, mean)

# group by county and join population
counties <- townships %>% 
  clean_names() %>% 
  group_by(county_cd) %>% 
  summarize(geometry = st_union(geometry)) %>% 
  inner_join(pop_mean, by = join_by('county_cd'))

# get pesticide sum by county
pesticides_sum <- pesticides %>% 
  select(lbs_prd_used, county_cd) %>% 
  group_by(county_cd) %>% 
  summarize(lbs_prd_used = sum(lbs_prd_used, na.rm = TRUE))

# join by county
pest_by_county <- left_join(counties, pesticides_sum, by = join_by(county_cd))

rm(pop, townships, pesticides)
```

```{r}
map <- tm_shape(pest_by_county) + 
  tm_polygons(col = 'lbs_prd_used', title = 'Product Used (mil lbs)') + 
tm_shape(bees) + 
  tm_dots() + 
  tm_layout(legend.format = c(fun = function(x) stringr::str_remove(x, 'mlm'))) + 
  tm_compass(position = c('left', 'bottom'), type = '4star', size = 3) +
  tm_scale_bar(position = c('left', 'bottom'))

tmap_save(map, here::here('figs', 'bee_pesticide_map.png'), width = 4.7, height = 7, asp = 0)
```

```{r}
# select for rows with ids down to species
bee_species <- bees %>% 
  filter(taxonRank == 'Species') %>% 
  select('id', 'scientificName')

counties_9001 <- counties %>% st_transform(st_crs(land_cover))

land_cover_stars <- land_cover_stars %>% st_crop(counties_9001) %>% setNames('habitat') #%>% mutate(habitat = case_when(habitat %in% c(11, 12, 21, 22, 23, 24, 31) ~ 0, 
#                               habitat %in% c(41, 42, 43, 52, 71, 81, 82, 90, 95) ~ 1,
#                               habitat == 250 ~ NA))

#land_cover <- land_cover %>% terra::crop(counties_9001) %>% setNames('land_use') %>% lapp(., fun = function(habitat){ case_when(habitat %in% c(11, 12, 21, 22, 23, 24, 31) ~ 0, 
#                               habitat %in% c(41, 42, 43, 52, 71, 81, 82, 90, 95) ~ 1,
#                               habitat == 250 ~ NA)})


bee_species_9001 <- bee_species %>% st_transform(st_crs(land_cover)) %>% st_extract(land_cover_stars, .) %>% mutate(habitat = case_when(habitat %in% c(11, 12, 21, 22, 23, 24, 31) ~ 0, 
                                                                                                                                        habitat %in% c(41, 42, 43, 52, 71, 81, 82, 90, 95) ~ 1, 
                                                                                                                                        habitat == 250 ~ NA))

#bee_species_9001 <- bee_species %>% st_transform(st_crs(land_cover)) %>% terra::extract(land_cover, ., bind = TRUE) %>% st_as_sf()

bee_species_extract <- bee_species_9001 %>% st_transform(st_crs(counties)) %>% st_join(bee_species, join = st_nearest_feature) %>% drop_na()

bee_species <- bee_species_extract



#land_cover_ca_agg <- land_cover %>% terra::crop(counties_9001) %>% terra::aggregate(fact = 10, fun = max) %>% terra::mask(counties_9001) %>% project(crs(counties))

#land_cover_ca <- land_cover %>% terra::crop(counties_9001) %>% terra::aggregate(fact = 4, fun = 'mean') %>% terra::mask(counties_9001) %>% project(crs(counties))

#bee_species_land_use <- land_cover_ca %>% extract(bee_species, ID = FALSE, bind = TRUE) %>% st_as_sf() %>% drop_na() %>% rename(land_use = Annual_NLCD_LndCov_2023_CU_C1V0)

# get species richness, land use by county
biodiversity <- st_join(pest_by_county, bee_species) %>% 
  group_by(county_name) %>% 
  summarize(lbs_prd_used = first(lbs_prd_used), 
            sp_richness = n_distinct(scientificName)/n(),
            land_use = round_half_up(mean(habitat)))

#biodiversity$land_use <- round_half_up(biodiversity$land_use) %>% case_match(., c(-99999:11.5) ~ 11, c(11.5:16.5) ~ 12, c(16.5:21.5) ~ 21, c(21.5:22.5) ~ 22, c(22.5:23.5) ~ 23, c(23.5:27.5) ~ 24, c(27.5:36) ~ 31, c(36:41.5) ~ 41, c(41.5:42.5) ~ 42, c(42.5:47.5) ~ 43, c(47.5:61.5) ~ 52, c(61.5:76) ~ 71, c(76:81.5) ~ 81, c(81.5:86) ~ 82, c(86:92.5) ~ 90, c(92.5:105) ~ 95, c(105:99999) ~ NA, .default = .)

```


```{r}
ggplot(biodiversity, aes(lbs_prd_used, sp_richness)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  labs(x = 'Product Used (lbs)',
       y = 'Species Richness Normalized by Sample Size',
       title = 'Effect of Pesticide Application on Anthophila Richness') + 
  theme_minimal()

ggsave(here::here('figs', 'initial_plot.png'), width = 7, height = 4)
```
## Diagnosing Spatialautocorrelation

```{r}
# convert lbs pesticide to kg so numbers are small enough to be handled by computer
biodiversity <- biodiversity %>% mutate(kg_prd_used = lbs_prd_used * 0.45359237)

# get linear model
biodiv_lm <- lm(sp_richness ~ kg_prd_used, biodiversity)

# attach resids to dataset
biodiversity <- biodiversity %>% mutate(sp_pest_resid = resid(biodiv_lm))

# get centroids of each county polygon
bio_center <- st_centroid(biodiversity)
  
# try and calculate spatial autocorrelation at 50 km
bee_nb <- dnearneigh(bio_center, d1 = 0, d2 = 100000)
```


```{r}

# assign weights to each neighboring object
# W = 1/# of neighbors
# zero policy allows listing of objects with zero neighbors
bee_lw <- nb2listw(bee_nb, style = 'W', zero.policy = TRUE)

# get moran I
# we must pass a dataset with called column
# listw = weights list from nb2listw
# n = total features with at least 1 neighbor
# S0 = sum of all weights
bee_resid_moran <- moran(biodiversity$sp_pest_resid, 
                         listw = bee_lw, 
                         n = length(bee_nb), 
                         S0 = Szero(bee_lw))

# run 999 simulations
bee_mc <- moran.mc(biodiversity$sp_pest_resid, bee_lw, nsim = 999)

# running a lag model
lag_mod <- lag.listw(bee_lw, biodiversity$sp_pest_resid)

# making lag model table
lag_mod_tib <- tibble(resids = biodiversity$sp_pest_resid, neighborhood = lag_mod)

# lag mod lm
lag_lm <- lm(neighborhood ~ resids, data = lag_mod_tib)
```


```{r}
tibble(moran = bee_mc$res) %>% 
  ggplot(aes(x = moran)) + 
  geom_freqpoly(lwd = 1.5) + 
  geom_vline(xintercept = bee_resid_moran$I, 
             color = 'red', 
             linewidth = 2.5) + 
  labs(x = "Moran's I",
       y = 'Frequency') + 
  theme_minimal()

ggsave(here::here('figs', 'moran_bad.png'), width = 7, height = 4)
```

```{r}
ggplot(lag_mod_tib, aes(resids, neighborhood)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  labs(x = 'Residuals', 
       y = 'Spatial Neighborhood') + 
  geom_text(aes(x=0.5, y=0.38, label = paste0('r', common::supsc("2"), ' = ', summary(lag_lm)$adj.r.squared)),
           color="darkred", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=0.5, y=0.35, label = paste0('p = ', summary(lag_lm)$coefficients[2,4])),
           color="darkred", 
           size=4.5, fontface="italic") +
  theme_minimal()

ggsave(here::here('figs', 'resids_bad.png'), width = 7, height = 4)
```


conclusion: there might be spatial autocorrelation


Get error model to account for spatialautocorrelation
```{r}

bio_err <- errorsarlm(sp_richness ~ kg_prd_used, 
            data = biodiversity,
            listw = bee_lw,
            na.action = na.exclude, 
            zero.policy = TRUE)

summary(bio_err)
```

```{r}

# add model and model residuals column to lag tibble
if(exists('error_mod') == FALSE){
lag_mod_tib <- lag_mod_tib %>% add_column(error_mod = fitted(bio_err), error_resid = resid(bio_err))
}

# running a lag model with the error model
lag_mod_err <- lag.listw(bee_lw, lag_mod_tib$error_resid)

# get moran I for error model
err_moran <- moran(lag_mod_tib$error_resid, listw = bee_lw, n = length(bee_nb), S0 = Szero(bee_lw))

# run simulation with error model
resid_mc <- moran.mc(lag_mod_tib$error_resid, bee_lw, nsim = 999)

```

```{r}
tibble(moran = resid_mc$res) %>% 
  ggplot(aes(x = moran)) + 
  geom_histogram() + 
  geom_vline(xintercept = err_moran$I, 
             color = 'green3', 
             linewidth = 2.5) + 
  labs(x = "Moran's I",
       y = 'Frequency') + 
  theme_minimal()

ggsave(here::here('figs', 'moran_good.png'), width = 7, height = 4)
```

```{r}
# add lag for error to tibble
if ('neighborhood_err' %in% names(lag_mod_tib) == FALSE){
lag_mod_tib <- lag_mod_tib %>% add_column(neighborhood_err = lag_mod_err)
}

# run an lm to get p for errors neighborhood ~ resid
err_res_lm <- lm(lag_mod_tib$neighborhood_err ~ lag_mod_tib$error_resid)
```

```{r}
ggplot(lag_mod_tib, aes(error_resid, neighborhood_err)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  labs(x = 'Residuals', 
       y = 'Spatial Neighborhood') + 
  geom_text(aes(x=0.5, y=0.3, label = paste0('r', common::supsc("2"), ' = ', summary(err_res_lm)$adj.r.squared)),
           color="turquoise3", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=0.5, y=0.27, label = paste0('p = ', summary(err_res_lm)$coefficients[2,4])),
           color="turquoise3", 
           size=4.5, fontface="italic") +
  theme_minimal()

ggsave(here::here('figs', 'resids_good.png'), width = 7, height = 4)
```

by using an error model, we resolve the autospatial correlation
```{r}
# plot error model variables
ggplot(biodiversity, aes(x = kg_prd_used, y = sp_richness)) + 
  geom_abline(intercept = coef(bio_err)[2], 
              slope = coef(bio_err)[3], 
              linewidth = 2, 
              color = 'darkred') + 
  geom_point() +
  labs(x = 'Product Used (kg)',
       y = 'Species Richness Normalized by Sample Size',
       title = 'Effect of Pesticide Application on Anthophila Richness') + 
  geom_text(aes(x=1.8e+7, y=0.75, 
                label = paste0('pseudo-r', common::supsc("2"), 
                               ' = ', 
                               '???')),
           color="darkred", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=1.8e+7, y=0.7, 
                label = paste0('p = ', 
                               summary(bio_err)$Coef[2,4])),
           color="darkred", 
           size=4.5, fontface="italic") +
  theme_minimal()

ggsave(here::here('figs', 'final_fig.png'), width = 6, height = 4)
```


# work with pop density data
```{r}
if ('pop_mean' %in% names(biodiversity) == FALSE){
# join population data
biodiversity <- biodiversity %>% inner_join(pop_mean, by = join_by(county_name)) %>% rename(pop_mean = 'mean')

biodiversity <- biodiversity %>% mutate(area = st_area(biodiversity))
units(biodiversity$area) <- 'km^2'

biodiversity <- biodiversity %>% mutate(pop_density = as.numeric(pop_mean/area))
}

# biodiversity <- biodiversity %>% mutate(less_than = ifelse(pop_density < 150000, 'Low Density', 'High Density'))
```

```{r}
temp_lm <- lm(sp_richness ~ kg_prd_used + pop_density, biodiversity)
```

```{r}

expand_grid(sp_richness = seq(min(biodiversity$sp_richness), max(biodiversity$sp_richness), length.out = nrow(biodiversity)),
            kg_prd_used = seq(min(biodiversity$kg_prd_used), max(biodiversity$kg_prd_used), length.out = nrow(biodiversity)),
            pop_density = c(summary(biodiversity$pop_density)[1], summary(biodiversity$pop_density)[2], summary(biodiversity$pop_density)[3], summary(biodiversity$pop_density)[5], summary(biodiversity$pop_density)[6])) %>% 
mutate(p = predict(temp_lm,
            newdata = .,
            type = 'response')) %>%
ggplot(aes(x = kg_prd_used, y = p, color = as.factor(pop_density))) + 
  geom_line() + 
  labs(x = 'Pesticide Product Used (kg)', 
       y = 'Biodiversity Probability',
       title = 'Probability of Biodiversity by Pesticide Use and Population Density',
       color = "Population Density") + 
   scale_color_manual(labels = c('Min', 'Q1', "Median", 'Q3', 'Max'), values = viridisLite::mako(5, end = 0.85))

ggsave(here::here('figs', 'pop_density.png'), width = 6, height = 4)
```


```{r}
ggplot(biodiversity, aes(kg_prd_used, pop_density)) + 
  geom_point() + 
  geom_smooth(method = lm)
```

```{r}
if ('habitat_frag' %in% names(biodiversity) == FALSE){
hab_frag_ca <- hab_frag %>% st_intersection(counties)
biodiversity_temp <- biodiversity
biodiversity <- biodiversity %>% st_join(select(.data = hab_frag_ca, fragmntndx)) %>% group_by(county_name) %>% summarize(habitat_frag = mean(fragmntndx)) %>% st_drop_geometry() %>% inner_join(biodiversity_temp, .)
}
```


seeing which variables correlate
```{r}
summary(lm(sp_richness ~ habitat_frag, biodiversity))
summary(lm(sp_richness ~ pop_density, biodiversity))
summary(lm(sp_richness ~ land_use, biodiversity))

summary(lm(sp_richness ~ kg_prd_used + habitat_frag, biodiversity))
summary(lm(sp_richness ~ kg_prd_used + pop_density, biodiversity))
summary(lm(sp_richness ~ kg_prd_used + land_use, biodiversity))

```

getting new lm
```{r}
# new lm w land use
land_use_lm <- summary(lm(sp_richness ~ kg_prd_used + land_use, biodiversity))

# attaching resids of new lm to df
biodiversity <- biodiversity %>% mutate(sp_pest_land_resid = resid(land_use_lm))
```

neighborhood weighting from previous error model is alread suitable for this one so no need to do it again
```{r}
# get moran I again
bee_resid_moran <- moran(biodiversity$sp_pest_land_resid, 
                         listw = bee_lw, 
                         n = length(bee_nb), 
                         S0 = Szero(bee_lw))

# run 999 simulations
bee_mc <- moran.mc(biodiversity$sp_pest_land_resid, bee_lw, nsim = 999)

# running a lag model
lag_mod <- lag.listw(bee_lw, biodiversity$sp_pest_land_resid)

# making lag model table
lag_mod_tib <- tibble(resids = biodiversity$sp_pest_land_resid, neighborhood = lag_mod)

# lag mod lm
lag_lm <- lm(neighborhood ~ resids, data = lag_mod_tib)
```

```{r}
tibble(moran = bee_mc$res) %>% 
  ggplot(aes(x = moran)) + 
  geom_freqpoly(lwd = 1.5) + 
  geom_vline(xintercept = bee_resid_moran$I, 
             color = 'red', 
             linewidth = 2.5) + 
  labs(x = "Moran's I",
       y = 'Frequency') + 
  theme_minimal()

#ggsave(here::here('figs', 'moran_bad.png'), width = 7, height = 4)
```

making the plots
```{r}
ggplot(lag_mod_tib, aes(resids, neighborhood)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  labs(x = 'Residuals', 
       y = 'Spatial Neighborhood') + 
  geom_text(aes(x=0.5, y=0.38, label = paste0('r', common::supsc("2"), ' = ', summary(lag_lm)$adj.r.squared)),
           color="darkred", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=0.5, y=0.35, label = paste0('p = ', summary(lag_lm)$coefficients[2,4])),
           color="darkred", 
           size=4.5, fontface="italic") +
  theme_minimal()

#ggsave(here::here('figs', 'resids_bad.png'), width = 7, height = 4)
```
conclusion? maybe some spatial coorelation. we'll apply an error model for good measure.

```{r}
bio_land_err <- errorsarlm(sp_richness ~ kg_prd_used + land_use, 
                data = biodiversity,
                listw = bee_lw,
                na.action = na.exclude, 
                zero.policy = TRUE)

summary(bio_land_err)
```

```{r}
# add model and model residuals column to lag tibble
if(exists('error_mod_land') == FALSE){
lag_mod_tib <- lag_mod_tib %>% add_column(error_mod_land = fitted(bio_land_err), error_resid_land = resid(bio_land_err))
}

# running a lag model with the error model
lag_mod_err <- lag.listw(bee_lw, lag_mod_tib$error_resid_land)

# get moran I for error model
err_moran <- moran(lag_mod_tib$error_resid_land, listw = bee_lw, n = length(bee_nb), S0 = Szero(bee_lw))

# run simulation with error model
resid_mc <- moran.mc(lag_mod_tib$error_resid_land, bee_lw, nsim = 999)
```

```{r}
tibble(moran = resid_mc$res) %>% 
  ggplot(aes(x = moran)) + 
  geom_histogram() + 
  geom_vline(xintercept = err_moran$I, 
             color = 'green3', 
             linewidth = 2.5) + 
  labs(x = "Moran's I",
       y = 'Frequency') + 
  theme_minimal()

ggsave(here::here('figs', 'moran_good.png'), width = 7, height = 4)
```

```{r}
# add lag for error to tibble
if ('neighborhood_err_land' %in% names(lag_mod_tib) == FALSE){
lag_mod_tib <- lag_mod_tib %>% add_column(neighborhood_err_land = lag_mod_err)
}

# run an lm to get p for errors neighborhood ~ resid
err_res_lm <- lm(lag_mod_tib$neighborhood_err_land ~ lag_mod_tib$error_resid_land)
```

and no more coorelated residuals
```{r}
ggplot(lag_mod_tib, aes(error_resid_land, neighborhood_err_land)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  labs(x = 'Residuals', 
       y = 'Spatial Neighborhood') + 
  geom_text(aes(x=0.5, y=0.3, label = paste0('r', common::supsc("2"), ' = ', summary(err_res_lm)$adj.r.squared)),
           color="turquoise3", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=0.5, y=0.27, label = paste0('p = ', summary(err_res_lm)$coefficients[2,4])),
           color="turquoise3", 
           size=4.5, fontface="italic") +
  theme_minimal()

ggsave(here::here('figs', 'resids_good.png'), width = 7, height = 4)
```

autospatial correlation resolved
```{r}

# plot error model variables
expand_grid(sp_richness = seq(min(biodiversity$sp_richness), max(biodiversity$sp_richness), length.out = 100),
            kg_prd_used = seq(min(biodiversity$kg_prd_used), max(biodiversity$kg_prd_used), length.out = 100),
            land_use = c(0,1)) %>% 
  mutate(p = predict(bio_land_err,
                   newdata = .,
                   type = 'response')) %>%
ggplot() + 
  geom_line(aes(x = kg_prd_used, y = p, color = as.factor(land_use))) + 
#  geom_abline(intercept = coef(bio_land_err)[2], 
#              slope = coef(bio_land_err)[3], 
#              linewidth = 2, 
#              color = 'darkred') + 
  geom_point(data = biodiversity, mapping = aes(x = kg_prd_used, y = sp_richness)) +
  labs(x = 'Product Used (kg)',
       y = 'Species Richness Normalized by Sample Size',
       title = 'Effect of Pesticide Application on Anthophila Richness', 
       color = 'Land Use') + 
  geom_text(aes(x=1.3e+7, y=0.75, 
                label = paste0('pseudo-r', common::supsc("2"), 
                               ' = ', 
                               '???')),
           color="darkred", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=1.3e+7, y=0.7, 
                label = paste0('Pesticide Use (p) = ', 
                               summary(bio_land_err)$Coef[2,4])),
           color="darkred", 
           size=4.5, fontface="italic") +
  geom_text(aes(x=1.3e+7, y=0.65, 
                label = paste0('Land Cover (p) = ', 
                               summary(bio_land_err)$Coef[3,4])),
           color="darkred", 
           size=4.5, fontface="italic") + 
  scale_color_manual(labels = c('Non-Habitat', 'Habitat'), values = viridisLite::viridis(2, end = 0.8)) + 
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))

ggsave(here::here('figs', 'final_land_fig.png'), width = 6, height = 4)
```










# experimental zone
```{r}
# attach error model to variable df
if (!'error_mod' %in% names(biodiversity)){
  biodiversity <- biodiversity %>% add_column(error_mod = fitted(bio_err))
}

# get pseudo r squared for the error model
err_pseudo_r2 <- cor(null_lm, bio_err)^2


# null distribution maker
null_dist_maker <- function(){
null_dist_rich <- replicate(1000, {
  rand_rich <- mean(runif(58, min(biodiversity$sp_richness), max(biodiversity$sp_richness)))
})
null_dist_pest <- replicate(1000, {
  rand_pest <- mean(runif(58, min(biodiversity$kg_prd_used), max(biodiversity$kg_prd_used)))
})
x <- data.frame(null_rich = null_dist_rich, null_pest = null_dist_pest)

return(x)
}

null_dist <- null_dist_maker()
null_lm <- lm(null_rich ~ null_pest, null_dist)

#test <- 1 - (ln(fitted(bio_err))/ln(fitted(null_lm)))

# will finish this later
null_dist_maker_v2 <- function(){
null_dist_rich <- replicate(1000, {
  run <- bee_species %>% 
    mutate(species = sample(scientificName, n())) %>%
    st_join(pest_by_county, bee_species) %>% 
  group_by(county_cd) %>% 
  summarize(sp_richness = n_distinct(scientificName)/n())
  
  var <- var(run$sp_richness)
})
null_dist_pest <- replicate(1000, {
  rand_pest <- mean(runif(58, min(biodiversity$kg_prd_used), max(biodiversity$kg_prd_used)))
  run <- bee_species %>% 
    mutate(pesticides = sample(scientificName, n())) %>%
    st_join(pest_by_county, bee_species) %>% 
  group_by(county_cd) %>% 
  summarize(sp_richness = n_distinct(scientificName)/n())
  
  var <- var(run$sp_richness)
})
x <- data.frame(null_rich = null_dist_rich, null_pest = null_dist_pest)

return(x)
}

```


```{r}
ggplot(null_dist, aes(x = null_pest, y = null_rich)) + 
  geom_point() + 
  geom_smooth(method = lm)
```

There may not be a significant correlation between biodiversity and pesticide use, but we can do a confidence test anyway

1. Define hypothesis
HO = there is no significant coorelation between biodiversity and pesticide use
Ha = there is a significant coorelation

2. get t stat
amount of variance between counties

```{r}
t_st <- summary(bio_err)$Coef[2,3]
```

3. Get random dist and plot with t stat
```{r}
null_dist <- null_dist_maker()
null_lm <- errorsarlm(null_rich ~ null_pest, 
            data = null,
            listw = bee_lw,
            na.action = na.exclude, 
            zero.policy = TRUE)

null_fitted <- null_dist %>% mutate(fitted = fitted(null_lm),
                                    predict = predict(null_lm))

ggplot((null_fitted), aes(x = fitted)) + 
  geom_histogram(bins = 500) + 
  geom_vline(xintercept = t_st)
```





